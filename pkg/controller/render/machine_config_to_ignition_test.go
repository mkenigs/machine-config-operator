package render

import (
	"encoding/json"
	"testing"

	baseutil "github.com/coreos/butane/base/util"
	"github.com/coreos/ignition/v2/config/util"
	ign3types "github.com/coreos/ignition/v2/config/v3_2/types"
	mcfgv1 "github.com/openshift/machine-config-operator/pkg/apis/machineconfiguration.openshift.io/v1"
	ctrlcommon "github.com/openshift/machine-config-operator/pkg/controller/common"
	"github.com/openshift/machine-config-operator/test/helpers"
	"github.com/stretchr/testify/require"
	"k8s.io/apimachinery/pkg/runtime"
)

type machineConfigToIgnitionTestCase struct {
	name             string
	spec             mcfgv1.MachineConfigSpec
	expectedIgnition ign3types.Config
}

// create tree file from bytes rather than marshaling to allow inlining readable test cases
func createTreeFile(t *testing.T, path string, content []byte) ign3types.File {
	src, _, err := baseutil.MakeDataURL(content, nil, false)
	require.Nil(t, err)
	return ign3types.File{
		Node: ign3types.Node{
			Path: path,
		},
		FileEmbedded1: ign3types.FileEmbedded1{
			Contents: ign3types.Resource{
				Source: util.StrToPtr(src),
			},
			Mode: util.IntToPtr(0644),
		},
	}
}

func TestMachineConfigToIgnition(t *testing.T) {
	// common inputs
	defaultInputIgnition := ign3types.Config{
		Ignition: ign3types.Ignition{
			Version: "3.2.0",
		},
	}
	rawDefaultInputIgnition, err := json.Marshal(defaultInputIgnition)
	require.Nil(t, err)
	defaultInputConfig := runtime.RawExtension{
		Raw: rawDefaultInputIgnition,
	}

	// expected content
	defaultMCDContent, err := json.Marshal(MCDContent{})
	require.Nil(t, err)
	defaultMCDContentFile := helpers.NewIgnFile("/etc/machine-config-daemon/mcd_content.json", string(defaultMCDContent))
	defaultExpectedIgnition := defaultInputIgnition
	defaultExpectedIgnition.Storage.Files = append(defaultExpectedIgnition.Storage.Files, defaultMCDContentFile)

	testCases := []machineConfigToIgnitionTestCase{
		// test OSImageURL is simple enough to be added to testCases directly
		{
			name: "test OSImageURL",
			spec: mcfgv1.MachineConfigSpec{
				Config:     defaultInputConfig,
				OSImageURL: "URL that should be ignored",
			},
			expectedIgnition: defaultExpectedIgnition,
		},
	}

	// test Config
	inputIgnition := defaultInputIgnition
	tempUser := ign3types.PasswdUser{Name: "core", SSHAuthorizedKeys: []ign3types.SSHAuthorizedKey{"5678", "abc"}}
	inputIgnition.Passwd.Users = []ign3types.PasswdUser{tempUser}
	rawInputIgnition, err := json.Marshal(inputIgnition)
	require.Nil(t, err)

	expectedIgnition, err := ctrlcommon.ParseAndConvertConfig(rawInputIgnition)
	expectedIgnition.Storage.Files = append(expectedIgnition.Storage.Files, defaultMCDContentFile)
	require.Nil(t, err)

	testCases = append(testCases, machineConfigToIgnitionTestCase{
		name: "test Config",
		spec: mcfgv1.MachineConfigSpec{
			Config: runtime.RawExtension{
				Raw: rawInputIgnition,
			},
		},
		expectedIgnition: expectedIgnition,
	})

	// test Extensions
	treeFile := createTreeFile(t, "/etc/rpm-ostree/origin.d/extensions-7103bfc.yaml", []byte(`# Generated by the MCO

packages:
    - kernel-devel
    - kernel-headers
override-remove: []
`))
	expectedIgnition = defaultExpectedIgnition
	expectedIgnition.Storage.Files = append([]ign3types.File{treeFile}, expectedIgnition.Storage.Files...)
	testCases = append(testCases, machineConfigToIgnitionTestCase{
		name: "test Extensions",
		spec: mcfgv1.MachineConfigSpec{
			Config:     defaultInputConfig,
			Extensions: []string{"kernel-devel"},
		},
		expectedIgnition: expectedIgnition,
	})

	// test KernelType
	treeFile = createTreeFile(t, "/etc/rpm-ostree/origin.d/extensions-cd51cd4.yaml", []byte(`# Generated by the MCO

packages:
    - kernel-rt
    - kernel-rt-modules
    - kernel-rt-modules-extra
override-remove:
    - kernel
    - kernel-modules
    - kernel-modules-extra
`))
	expectedIgnition = defaultExpectedIgnition
	expectedIgnition.Storage.Files = append([]ign3types.File{treeFile}, expectedIgnition.Storage.Files...)
	testCases = append(testCases, machineConfigToIgnitionTestCase{
		name: "test KernelType",
		spec: mcfgv1.MachineConfigSpec{
			Config:     defaultInputConfig,
			KernelType: ctrlcommon.KernelTypeRealtime,
		},
		expectedIgnition: expectedIgnition,
	})

	// test KernelArguments
	mcdContentFile := helpers.NewIgnFile(MCDContentPath, `{"kernelArguments":["hugepagesz=1G","hugepages=4"],"fips":false}`)
	testCases = append(testCases, machineConfigToIgnitionTestCase{
		name: "test KernelArguments",
		spec: mcfgv1.MachineConfigSpec{
			Config:          defaultInputConfig,
			KernelArguments: []string{"hugepagesz=1G", "hugepages=4"},
		},
		expectedIgnition: ign3types.Config{
			Ignition: defaultExpectedIgnition.Ignition,
			Storage: ign3types.Storage{
				Files: []ign3types.File{
					mcdContentFile,
				},
			},
		},
	})

	// test FIPS
	mcdContentFile = helpers.NewIgnFile(MCDContentPath, `{"kernelArguments":null,"fips":true}`)
	testCases = append(testCases, machineConfigToIgnitionTestCase{
		name: "test FIPS",
		spec: mcfgv1.MachineConfigSpec{
			Config: defaultInputConfig,
			FIPS:   true,
		},
		expectedIgnition: ign3types.Config{
			Ignition: defaultExpectedIgnition.Ignition,
			Storage: ign3types.Storage{
				Files: []ign3types.File{
					mcdContentFile,
				},
			},
		},
	})

	for _, testCase := range testCases {
		testCase := testCase
		t.Run(testCase.name, func(t *testing.T) {
			t.Parallel()
			ignition, err := MachineConfigToIgnition(&testCase.spec)
			require.Nil(t, err)
			require.Equal(t, testCase.expectedIgnition, ignition)
		})
	}
}
